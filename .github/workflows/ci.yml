name: CI

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

on:
    push:
        branches: ["main"]
        tags: ["[a-z0-9]+@[0-9]+.[0-9]+.[0-9]+-?*"]
    pull_request:
        branches: ["main"]

env:
    CARGO_TERM_COLOR: always
    FORCE_COLOR: true
    UV_CACHE_DIR: ~/.cache/uv

jobs:
    check:
        runs-on: ${{ matrix.os }}
        defaults:
            run:
                shell: bash
        strategy:
            fail-fast: false
            matrix:
                include:
                    - os: macos-latest
                      items: check audit
                    - os: windows-latest
                      items: check
        steps:
            - uses: actions/checkout@v4
            - uses: actions-rust-lang/setup-rust-toolchain@v1
              with:
                  components: clippy, rustfmt
            - uses: taiki-e/install-action@v2
              with:
                  tool: cargo-audit, just

            - uses: actions/setup-node@v4
              with:
                  cache: npm
                  node-version-file: .node-version

            - uses: astral-sh/setup-uv@v4
            - name: Restore cache for uv
              uses: actions/cache@v4
              with:
                  key: uv-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/uv.lock') }}
                  path: ${{ env.UV_CACHE_DIR }}
                  restore-keys: uv-${{ runner.os }}-${{ runner.arch }}-

            - name: Check
              run: just prepare ${{ matrix.items }}

    build-poodio:
        # if: startsWith(github.ref, 'refs/tags/poodio@')
        runs-on: ${{ matrix.os }}
        defaults:
            run:
                shell: bash
        strategy:
            fail-fast: false
            matrix:
                include:
                    - os: macos-15
                      rustc-target: aarch64-apple-darwin
                      more-test:
                          python: "3.10 3.11 3.12 3.13"
                    - os: macos-13
                      rustc-target: x86_64-apple-darwin
                      more-test:
                          python: "3.10 3.11 3.12 3.13"
                    - os: ubuntu-24.04-arm
                      rustc-target: aarch64-unknown-linux-gnu
                      more-test:
                          python: "3.10 3.11 3.12 3.13"
                    # - os: ubuntu-24.04-arm ## Needed Linux-Musl ARM runner
                    #   rustc-target: aarch64-unknown-linux-musl
                    # - os: ubuntu-24.04 ## Deprecated 32-bit
                    #   rustc-target: i686-unknown-linux-gnu
                    - os: ubuntu-24.04
                      rustc-target: x86_64-unknown-linux-gnu
                      more-test:
                          python: "3.10 3.11 3.12 3.13"
                    # - os: ubuntu-24.04 ## Needed Linux-Musl AMD runner
                    #   rustc-target: x86_64-unknown-linux-musl
                    - os: windows-11-arm
                      rustc-target: aarch64-pc-windows-msvc
                      more-test:
                          python: ""
                    # - os: windows-2025 ## Deprecated 32-bit
                    #   rustc-target: i686-pc-windows-msvc
                    - os: windows-2022
                      rustc-target: x86_64-pc-windows-msvc
                      more-test:
                          python: "3.10 3.11 3.12 3.13"
        steps:
            - uses: actions/checkout@v4
            # See https://github.com/actions/partner-runner-images/issues/77
            - if: matrix.os == 'windows-11-arm'
              name: Install rustup on Windows ARM
              run: |
                  curl -LOs https://static.rust-lang.org/rustup/dist/aarch64-pc-windows-msvc/rustup-init.exe
                  ./rustup-init.exe -y --default-toolchain none --no-modify-path
                  echo "$USERPROFILE/.cargo/bin" >> "$GITHUB_PATH"
            - uses: actions-rust-lang/setup-rust-toolchain@v1
            - uses: taiki-e/install-action@v2
              with:
                  tool: just

            - uses: actions/setup-node@v4
              with:
                  cache: npm
                  node-version-file: .node-version

            # See https://github.com/astral-sh/python-build-standalone/pull/387
            - if: matrix.os == 'windows-11-arm'
              uses: actions/setup-python@v5
              id: python
              with:
                  python-version: 3.11
            - if: matrix.os != 'windows-11-arm'
              uses: astral-sh/setup-uv@v4
            - if: matrix.os == 'windows-11-arm'
              uses: astral-sh/setup-uv@v4
              with:
                  python-version: ${{ steps.python.outputs.python-version }}
            - name: Restore cache for uv
              uses: actions/cache@v4
              with:
                  key: uv-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/uv.lock') }}
                  path: ${{ env.UV_CACHE_DIR }}
                  restore-keys: uv-${{ runner.os }}-${{ runner.arch }}-

            - if: startsWith(matrix.os, 'ubuntu-')
              uses: awalsh128/cache-apt-pkgs-action@v1
              with:
                  packages: libasound2-dev

            - name: Build
              run: just prepare poodio::build "${{ matrix.rustc-target }}"
              env:
                  RUSTFLAGS: "--deny warnings"

            - name: Test (E2E)
              run: just tool poodio::test-e2e

            - name: Test More (E2E)
              run: |
                  for p in ${{ matrix.more-test.python }}; do
                      UV_PYTHON="$p" just prepare-pip poodio::test-e2e-pip || exit 3
                  done

            - uses: actions/upload-artifact@v4
              with:
                  name: ${{ matrix.rustc-target }}
                  path: poodio/dist/

    publish-poodio:
        if: startsWith(github.ref, 'refs/tags/poodio@')
        needs:
            - check
            - build-poodio
        runs-on: ubuntu-latest
        permissions:
            attestations: write
            contents: write
            id-token: write
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  fetch-tags: true
            - uses: actions/download-artifact@v4
              with:
                  path: dist/
            - uses: actions/setup-node@v4
              with:
                  cache: npm
                  cache-dependency-path: "**/package.json"
                  node-version-file: .node-version
                  registry-url: https://registry.npmjs.org/

            - name: Publish to github.com (Packaging)
              id: github-pack
              run: |
                  for dir in dist/*; do
                      TARGET="$(basename "$dir")"
                      ASSET="${{ github.ref_name }}-$TARGET.tgz"
                      cd "$dir/bin/"
                      echo "Packaging $ASSET ..."
                      tar -vczf "$ASSET" * || exit 1
                      cd - > /dev/null
                  done

                  LAST_TAG="$(git describe --tags --abbrev=0 HEAD~)"
                  HEAD_TAG="${{ github.ref_name }}"
                  GITHUB_REPO_URL="${{ github.server_url }}/${{ github.repository }}"
                  CHANGELOG="$GITHUB_REPO_URL/compare/$LAST_TAG...$HEAD_TAG"
                  CONTRIBUTORS="$(git log --pretty=format:'  + @%an' "$LAST_TAG".."$HEAD_TAG" | sort -u)"
                  INSTALLATION="$GITHUB_REPO_URL/blob/$HEAD_TAG/poodio/README.md#install"

                  echo "changelog=$CHANGELOG" >> "$GITHUB_OUTPUT"
                  echo "contributors=$CONTRIBUTORS" >> "$GITHUB_OUTPUT"
                  echo "installation=$INSTALLATION" >> "$GITHUB_OUTPUT"
            - name: Publish to github.com (Attestation)
              id: github-attest
              uses: actions/attest-build-provenance@v2
              with:
                  subject-path: dist/*/bin/*.tgz

            - name: Publish to github.com
              uses: softprops/action-gh-release@v2
              with:
                  body: |
                      - [**Changelog**](${{ steps.github-pack.outputs.changelog }})
                      - [**Attestation**](${{ steps.github-attest.outputs.attestation-url }})
                      - [**Installation**](${{ steps.github-pack.outputs.installation }})
                      - **Contributors**
                      ${{ steps.github-pack.outputs.contributors }}
                  files: dist/*/bin/*.tgz

            - name: Publish to npmjs.com
              run: |
                  npm publish "./$(set -- dist/*; echo "$1")/npm/common/"
                  for pkg in dist/*; do
                      npm publish "./$pkg/npm/native/" || exit 3
                  done
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.POODIO_NPMJS_TOKEN }}
            - name: Publish to crates.io
              run: cargo publish --locked --package poodio --no-verify --verbose
              env:
                  CARGO_REGISTRY_TOKEN: ${{ secrets.POODIO_CRATE_TOKEN }}
