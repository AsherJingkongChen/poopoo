name: CI

on:
    push:
        branches: ["main"]
        paths: ["**", "!_site/**"]
        tags: ["[a-z0-9]+@[0-9]+.[0-9]+.[0-9]+-?*"]
    pull_request:
        branches: ["main"]

concurrency:
    cancel-in-progress: true
    group: "${{ github.workflow }}-${{ github.ref }}"

env:
    CARGO_NET_RETRY: "10"
    CARGO_TERM_COLOR: "always"
    RUST_VERSION: "1.80"
    RUSTUP_MAX_RETRIES: "10"
    UV_CACHE_DIR: "~/.cache/uv"
    VOLTA_HOME: "~/.volta"

jobs:
    check:
        defaults:
            run:
                shell: bash
        runs-on: macos-latest
        steps:
            - uses: actions/checkout@v4

            - uses: actions-rust-lang/setup-rust-toolchain@v1
              with:
                  components: clippy, rustfmt
                  toolchain: "${{ env.RUST_VERSION }}"
            - uses: taiki-e/install-action@v2
              with:
                  tool: cargo-audit, just@1.40

            - uses: actions/setup-node@v4
              with:
                  cache: npm
                  node-version-file: .node-version

            - uses: astral-sh/setup-uv@v6
            - name: Restore cache for uv
              uses: actions/cache@v4
              with:
                  key: "uv-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/uv.lock') }}"
                  path: "${{ env.UV_CACHE_DIR }}"
                  restore-keys: "uv-${{ runner.os }}-${{ runner.arch }}-"

            - name: Check
              run: just prepare check audit

    build-poodio:
        if: startsWith(github.ref, 'refs/tags/poodio@')
        defaults:
            run:
                shell: bash
        runs-on: "${{ matrix.os }}"
        strategy:
            fail-fast: false
            matrix:
                include:
                    - os: macos-15
                      rust-target: aarch64-apple-darwin
                      node-versions: "16 18 20 22"
                      python-versions: "3.8 3.9 3.10 3.11 3.12 3.13"
                      can_upload_common: true
                    - os: macos-13
                      rust-target: x86_64-apple-darwin
                      node-versions: "16 18 20 22"
                      python-versions: "3.8 3.9 3.10 3.11 3.12 3.13"
                    - os: ubuntu-24.04-arm
                      rust-target: aarch64-unknown-linux-gnu
                      node-versions: "16 18 20 22"
                      python-versions: "3.8 3.9 3.10 3.11 3.12 3.13"
                    - os: ubuntu-24.04
                      rust-target: x86_64-unknown-linux-gnu
                      node-versions: "16 18 20 22"
                      python-versions: "3.8 3.9 3.10 3.11 3.12 3.13"
                    - os: windows-11-arm
                      rust-target: aarch64-pc-windows-msvc
                      node-versions: "20 22"
                      python-versions: "3.11"
                    - os: windows-2025
                      rust-target: x86_64-pc-windows-msvc
                      node-versions: "16 18 20 22"
                      python-versions: "3.8 3.9 3.10 3.11 3.12 3.13"
        steps:
            - uses: actions/checkout@v4

            - uses: actions-rust-lang/setup-rust-toolchain@v1
              with:
                  toolchain: "${{ env.RUST_VERSION }}"
            - uses: taiki-e/install-action@v2
              with:
                  tool: just@1.40

            - uses: volta-cli/action@v4
            - name: Restore cache for volta
              uses: actions/cache@v4
              with:
                  key: "volta-${{ runner.os }}-${{ runner.arch }}"
                  path: "${{ env.VOLTA_HOME }}/cache/"
            - run: volta install "node@$(cat .node-version)"
            - uses: actions/setup-node@v4
              with:
                  cache: npm

            # See https://github.com/astral-sh/python-build-standalone/pull/387
            - if: matrix.os != 'windows-11-arm'
              uses: astral-sh/setup-uv@v6
            - if: matrix.os == 'windows-11-arm'
              uses: actions/setup-python@v5
              id: python
              with:
                  architecture: arm64
                  python-version: "${{ matrix.python-versions }}"
            - if: matrix.os == 'windows-11-arm'
              uses: astral-sh/setup-uv@v6
              with:
                  python-version: "${{ steps.python.outputs.python-version }}"
            - name: Restore cache for uv
              uses: actions/cache@v4
              with:
                  key: "uv-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/uv.lock') }}"
                  path: "${{ env.UV_CACHE_DIR }}"
                  restore-keys: "uv-${{ runner.os }}-${{ runner.arch }}-"

            - if: startsWith(matrix.os, 'ubuntu-')
              uses: awalsh128/cache-apt-pkgs-action@v1
              with:
                  packages: libasound2-dev
                  version: "${{ matrix.os }}"

            - name: Build
              run: just prepare poodio::build '${{ matrix.rust-target }}'

            - name: Test
              run: |
                  just tool-cargo poodio::test-e2e-bin

                  for v in ${{ matrix.node-versions }}; do
                    volta install "node@${v}"
                    just tool-npm poodio::test-e2e-npm
                  done

                  for v in ${{ matrix.python-versions }}; do
                    UV_PYTHON="${v}" \
                    just tool-pip poodio::test-e2e-pip
                  done

            - if: matrix.can_upload_common
              uses: actions/upload-artifact@v4
              with:
                  name: common
                  path: poodio/dist/common/
            - uses: actions/upload-artifact@v4
              with:
                  name: "native-${{ matrix.rust-target }}"
                  path: poodio/dist/native/

    publish-poodio:
        if: startsWith(github.ref, 'refs/tags/poodio@')
        defaults:
            run:
                shell: bash
        needs: ["build-poodio", "check"]
        permissions:
            attestations: write
            contents: write
            id-token: write
        runs-on: macos-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  fetch-tags: true

            - uses: actions/download-artifact@v4
              with:
                  path: dist/
            - run: ls -Rlp --color=always dist

            - name: Publish to github.com (Attestation)
              id: github-attest
              uses: actions/attest-build-provenance@v2
              with:
                  subject-path: dist/*/bin/*.tgz
            - name: Publish to github.com
              env:
                  GH_TOKEN: "${{ github.token }}"
              run: |
                  LAST_TAG="$(git describe --abbrev=0 --match 'poodio@*' --tags HEAD~)"
                  HEAD_TAG="${{ github.ref_name }}"
                  REPO="${{ github.server_url }}/${{ github.repository }}"

                  gh release delete --yes "${HEAD_TAG}" || true
                  echo "\
                  - [**Changelog**](${GITHUB_REPO_URL}/compare/${LAST_TAG}...${HEAD_TAG})
                  - [**Attestation**](${{ steps.github-attest.outputs.attestation-url }})
                  - [**Installation**](${REPO}/blob/${HEAD_TAG}/poodio/README.md#install)
                  - **Contributors**
                  $(git log --pretty='format:  + @%an' "${LAST_TAG}".."${HEAD_TAG}" | sort -u)" \
                  | gh release create --notes-file - "${HEAD_TAG}" dist/*/bin/*.tgz*
            - id: homebrew-prepare
              name: Publish to Homebrew (Prepare)
              run: |
                  echo "inputs=$(
                    cargo metadata --format-version 1 --locked \
                      --manifest-path poodio/Cargo.toml --no-deps \
                    | jq --compact-output --slurp '
                      [ ( .[0].packages.[0]
                          | { description, homepage, license, name, repository,
                              tag: "\(.name)@\(.version)", version } ),
                        ( .[1:] | add ) ]
                      | add
                      | with_entries(select(.value != null))
                      | { dict: . | debug | @json, name }' \
                      - dist/*/bin/*.tgz.meta.json )" \
                  >> "${GITHUB_OUTPUT}"
            - name: Publish to Homebrew
              uses: the-actions-org/workflow-dispatch@v4
              with:
                  display-workflow-run-url-interval: 10s
                  inputs: "${{ steps.homebrew-prepare.outputs.inputs }}"
                  ref: main
                  repo: AsherJingkongChen/homebrew--
                  token: "${{ secrets.POODIO_HBREW_TOKEN }}"
                  wait-for-completion-interval: 20s
                  wait-for-completion: true
                  workflow-logs: ignore
                  workflow: publish.yml

            - uses: actions/setup-node@v4
              with:
                  cache: npm
                  node-version-file: .node-version
            - name: Publish to npmjs.com
              env:
                  NODE_AUTH_TOKEN: "${{ secrets.POODIO_NPMJS_TOKEN }}"
              run: |
                  npm set //registry.npmjs.org/:_authToken "${NODE_AUTH_TOKEN}"
                  for p in dist/*/npm/; do
                      npm publish "./${p}"
                  done
                  npm set //registry.npmjs.org/:_authToken

            - uses: astral-sh/setup-uv@v6
            - name: Publish to pypi.org
              run: uv publish dist/*/pip/*.{tar.gz,whl}

            - name: Publish to crates.io
              env:
                  CARGO_REGISTRY_TOKEN: "${{ secrets.POODIO_CRATE_TOKEN }}"
              run: cargo publish --locked --no-verify --package poodio --verbose
