name: CI

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

on:
    push:
        branches: ["main"]
        tags: ["[a-z0-9]+@[0-9]+.[0-9]+.[0-9]+-?*"]
    pull_request:
        branches: ["main"]

env:
    CARGO_TERM_COLOR: always
    FORCE_COLOR: true
    UV_CACHE_DIR: ~/.cache/uv

jobs:
    check:
        runs-on: ${{ matrix.os }}
        defaults:
            run:
                shell: bash
        strategy:
            fail-fast: false
            matrix:
                include:
                    - os: macos-latest
                      items: check audit
        steps:
            - uses: actions/checkout@v4
            - uses: actions-rust-lang/setup-rust-toolchain@v1
              with:
                  components: clippy, rustfmt
            - uses: taiki-e/install-action@v2
              with:
                  tool: cargo-audit, just

            - uses: actions/setup-node@v4
              with:
                  cache: npm
                  node-version-file: .node-version

            - uses: astral-sh/setup-uv@v4
            - name: Restore cache for uv
              uses: actions/cache@v4
              with:
                  key: uv-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/uv.lock') }}
                  path: ${{ env.UV_CACHE_DIR }}
                  restore-keys: uv-${{ runner.os }}-${{ runner.arch }}-

            - name: Check
              run: just prepare ${{ matrix.items }}

    build-poodio:
        if: startsWith(github.ref, 'refs/tags/poodio@')
        runs-on: ${{ matrix.os }}
        defaults:
            run:
                shell: bash
        strategy:
            fail-fast: false
            matrix:
                include:
                    - os: macos-15
                      rust-target: aarch64-apple-darwin
                      python-versions: 3.13 3.12 3.11 3.10 3.9 3.8
                    - os: macos-13
                      rust-target: x86_64-apple-darwin
                      python-versions: 3.13 3.12 3.11 3.10 3.9 3.8
                    - os: ubuntu-24.04-arm
                      rust-target: aarch64-unknown-linux-gnu
                      python-versions: 3.13 3.12 3.11 3.10 3.9 3.8
                    # - os: ubuntu-24.04-arm ## Needed Linux-Musl ARM runner
                    #   rust-target: aarch64-unknown-linux-musl
                    - os: ubuntu-24.04
                      rust-target: x86_64-unknown-linux-gnu
                      python-versions: 3.13 3.12 3.11 3.10 3.9 3.8
                    # - os: ubuntu-24.04 ## Needed Linux-Musl AMD runner
                    #   rust-target: x86_64-unknown-linux-musl
                    - os: windows-11-arm
                      rust-target: aarch64-pc-windows-msvc
                      python-versions: 3.13
                    - os: windows-2025
                      rust-target: x86_64-pc-windows-msvc
                      python-versions: 3.13 3.12 3.11 3.10 3.9 3.8
        steps:
            - uses: actions/checkout@v4
            # See https://github.com/actions/partner-runner-images/issues/77
            - if: matrix.os == 'windows-11-arm'
              name: Install rustup on Windows ARM
              run: |
                  curl -LOs https://static.rust-lang.org/rustup/dist/aarch64-pc-windows-msvc/rustup-init.exe
                  ./rustup-init.exe -y --default-toolchain none --no-modify-path
                  echo "$USERPROFILE/.cargo/bin" >> "$GITHUB_PATH"
            - uses: actions-rust-lang/setup-rust-toolchain@v1
            - uses: taiki-e/install-action@v2
              with:
                  tool: just

            - uses: actions/setup-node@v4
              with:
                  cache: npm
                  node-version-file: .node-version

            # See https://github.com/astral-sh/python-build-standalone/pull/387
            - if: matrix.os == 'windows-11-arm'
              uses: actions/setup-python@v5
              id: python
              with:
                  python-version: 3.11
            - if: matrix.os != 'windows-11-arm'
              uses: astral-sh/setup-uv@v4
            - if: matrix.os == 'windows-11-arm'
              uses: astral-sh/setup-uv@v4
              with:
                  python-version: ${{ steps.python.outputs.python-version }}
            - name: Restore cache for uv
              uses: actions/cache@v4
              with:
                  key: uv-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/uv.lock') }}
                  path: ${{ env.UV_CACHE_DIR }}
                  restore-keys: uv-${{ runner.os }}-${{ runner.arch }}-

            - if: startsWith(matrix.os, 'ubuntu-')
              uses: awalsh128/cache-apt-pkgs-action@v1
              with:
                  packages: libasound2-dev
                  version: ${{ matrix.os }}

            - name: Build
              run: just prepare poodio::build '${{ matrix.rust-target }}'

            # TODO: Various node versions for testing
            - name: Test
              run: |
                  just tool
                  just poodio::test-e2e-bin poodio::test-e2e-npm
                  for p in ${{ matrix.python-versions }}; do
                      UV_PYTHON="$p" just prepare-pip poodio::test-e2e-pip || exit 3
                  done

            - uses: actions/upload-artifact@v4
              with:
                  name: ${{ matrix.rust-target }}
                  path: poodio/dist/

    publish-poodio:
        if: startsWith(github.ref, 'refs/tags/poodio@')
        needs:
            - check
            - build-poodio
        runs-on: macos-latest
        defaults:
            run:
                shell: bash
        permissions:
            attestations: write
            contents: write
            id-token: write
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  fetch-tags: true
            - uses: actions/download-artifact@v4
              with:
                  path: dist-orig/
            - name: Organize distributions
              run: |
                  DIST_ORIG_0="$(set -- dist-orig/*; echo "$1")"

                  mkdir -p dist/common/
                  mv "$DIST_ORIG_0/npm/common/" dist/common/npm/
                  mv "$DIST_ORIG_0/pip/sdist/" dist/common/pip/

                  mkdir -p dist/native/
                  for d in dist-orig/*; do
                      TARGET="$(basename "$d")"
                      DIST_DIR="../../../dist/native/$TARGET"
                      BIN_NAME="${{ github.ref_name }}-$TARGET.tgz"

                      cd "$d/bin/"
                      mkdir -p "$DIST_DIR/bin/"
                      tar -czf "$DIST_DIR/bin/$BIN_NAME" * || exit 3
                      cd - > /dev/null

                      cd "$d/npm/"
                      mkdir -p "$DIST_DIR/"
                      mv native/ "$DIST_DIR/npm/"
                      cd - > /dev/null

                      cd "$d/pip/"
                      mkdir -p "$DIST_DIR/"
                      mv wheel/ "$DIST_DIR/pip/"
                      cd - > /dev/null
                  done

                  ls -lR dist*/

            - uses: actions/setup-node@v4
              with:
                  cache: npm
                  registry-url: https://registry.npmjs.org/
            - uses: astral-sh/setup-uv@v4
            - name: Restore cache for uv
              uses: actions/cache@v4
              with:
                  key: uv-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/uv.lock') }}
                  path: ${{ env.UV_CACHE_DIR }}
                  restore-keys: uv-${{ runner.os }}-${{ runner.arch }}-

            - name: Publish to github.com (Preparing)
              id: github-prepare
              run: |
                  LAST_TAG="$(git describe --tags --abbrev=0 HEAD~)"
                  HEAD_TAG="${{ github.ref_name }}"
                  GITHUB_REPO_URL="${{ github.server_url }}/${{ github.repository }}"
                  CHANGELOG="$GITHUB_REPO_URL/compare/$LAST_TAG...$HEAD_TAG"
                  CONTRIBUTORS="$(git log --pretty=format:'  + @%an' "$LAST_TAG".."$HEAD_TAG" | sort -u)"
                  INSTALLATION="$GITHUB_REPO_URL/blob/$HEAD_TAG/poodio/README.md#install"

                  echo "changelog=$CHANGELOG" >> "$GITHUB_OUTPUT"
                  echo "contributors=$CONTRIBUTORS" >> "$GITHUB_OUTPUT"
                  echo "installation=$INSTALLATION" >> "$GITHUB_OUTPUT"
            - name: Publish to github.com (Attestation)
              if: false
              id: github-attest
              uses: actions/attest-build-provenance@v2
              with:
                  subject-path: dist/native/*/bin/*

            - name: Publish to github.com
              if: false
              uses: softprops/action-gh-release@v2
              with:
                  body: |
                      - [**Changelog**](${{ steps.github-prepare.outputs.changelog }})
                      - [**Attestation**](${{ steps.github-attest.outputs.attestation-url }})
                      - [**Installation**](${{ steps.github-prepare.outputs.installation }})
                      - **Contributors**
                      ${{ steps.github-prepare.outputs.contributors }}
                  files: dist/native/*/bin/*

            - name: Publish to npmjs.com
              run: |
                  for p in dist/*/npm/ dist/*/*/npm/; do
                      npm publish --dry-run "./$p" || exit 3
                  done
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.POODIO_NPMJS_TOKEN }}

            - name: Publish to crates.io
              run: cargo publish --dry-run --locked --package poodio --no-verify --verbose
              env:
                  CARGO_REGISTRY_TOKEN: ${{ secrets.POODIO_CRATE_TOKEN }}

            # TODO: Fix installation of dist (./dist/common/pip/)
            - name: Publish to pypi.org
              if: false
              run: |
                  uv publish --trusted-publishing always dist/*/*/pip/
              env:
                  UV_PUBLISH_TOKEN: ${{ secrets.POODIO_PYPI_TOKEN }}
