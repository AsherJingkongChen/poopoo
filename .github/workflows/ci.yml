name: CI

concurrency:
    group: "${{ github.workflow }}-${{ github.ref }}"
    cancel-in-progress: true

on:
    push:
        branches: ["main"]
        tags: ["[a-z0-9]+@[0-9]+.[0-9]+.[0-9]+-?*"]
    pull_request:
        branches: ["main"]

env:
    CARGO_NET_RETRY: "10"
    CARGO_TERM_COLOR: "always"
    RUST_VERSION: "1.80"
    RUSTUP_MAX_RETRIES: "10"
    UV_CACHE_DIR: "~/.cache/uv"
    VOLTA_HOME: "~/.volta"

jobs:
    check:
        runs-on: macos-latest
        defaults:
            run:
                shell: bash
        steps:
            - uses: actions/checkout@v4

            - uses: actions-rust-lang/setup-rust-toolchain@v1
              with:
                  components: clippy, rustfmt
                  toolchain: "${{ env.RUST_VERSION }}"
            - uses: taiki-e/install-action@v2
              with:
                  tool: cargo-audit, just@1.40

            - uses: actions/setup-node@v4
              with:
                  cache: npm
                  node-version-file: .node-version

            - uses: astral-sh/setup-uv@v6
            - name: Restore cache for uv
              uses: actions/cache@v4
              with:
                  key: "uv-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/uv.lock') }}"
                  path: "${{ env.UV_CACHE_DIR }}"
                  restore-keys: "uv-${{ runner.os }}-${{ runner.arch }}-"

            - name: Check
              run: just prepare check audit

    build-poodio:
        if: startsWith(github.ref, 'refs/tags/poodio@')
        runs-on: "${{ matrix.os }}"
        defaults:
            run:
                shell: bash
        strategy:
            fail-fast: false
            matrix:
                include:
                    - os: macos-15
                      rust-target: aarch64-apple-darwin
                      node-versions: "16 18 20 22"
                      python-versions: "3.8 3.9 3.10 3.11 3.12 3.13"
                    - os: macos-13
                      rust-target: x86_64-apple-darwin
                      node-versions: "16 18 20 22"
                      python-versions: "3.8 3.9 3.10 3.11 3.12 3.13"
                    - os: ubuntu-24.04-arm
                      rust-target: aarch64-unknown-linux-gnu
                      node-versions: "16 18 20 22"
                      python-versions: "3.8 3.9 3.10 3.11 3.12 3.13"
                    - os: ubuntu-24.04
                      rust-target: x86_64-unknown-linux-gnu
                      node-versions: "16 18 20 22"
                      python-versions: "3.8 3.9 3.10 3.11 3.12 3.13"
                    - os: windows-11-arm
                      rust-target: aarch64-pc-windows-msvc
                      node-versions: "20 22"
                      python-versions: "3.11"
                    - os: windows-2025
                      rust-target: x86_64-pc-windows-msvc
                      node-versions: "16 18 20 22"
                      python-versions: "3.8 3.9 3.10 3.11 3.12 3.13"
        steps:
            - uses: actions/checkout@v4

            - uses: actions-rust-lang/setup-rust-toolchain@v1
              with:
                  toolchain: "${{ env.RUST_VERSION }}"
            - uses: taiki-e/install-action@v2
              with:
                  tool: just@1.40

            - uses: volta-cli/action@v4
            - name: Restore cache for volta
              uses: actions/cache@v4
              with:
                  key: "volta-${{ runner.os }}-${{ runner.arch }}"
                  path: "${{ env.VOLTA_HOME }}/cache/"
            - run: volta install "node@$(cat .node-version)"
            - uses: actions/setup-node@v4
              with:
                  cache: npm

            # See https://github.com/astral-sh/python-build-standalone/pull/387
            - if: matrix.os != 'windows-11-arm'
              uses: astral-sh/setup-uv@v6
            - if: matrix.os == 'windows-11-arm'
              uses: actions/setup-python@v5
              id: python
              with:
                  architecture: arm64
                  python-version: "${{ matrix.python-versions }}"
            - if: matrix.os == 'windows-11-arm'
              uses: astral-sh/setup-uv@v6
              with:
                  python-version: "${{ steps.python.outputs.python-version }}"
            - name: Restore cache for uv
              uses: actions/cache@v4
              with:
                  key: "uv-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/uv.lock') }}"
                  path: "${{ env.UV_CACHE_DIR }}"
                  restore-keys: "uv-${{ runner.os }}-${{ runner.arch }}-"

            - if: startsWith(matrix.os, 'ubuntu-')
              uses: awalsh128/cache-apt-pkgs-action@v1
              with:
                  packages: libasound2-dev
                  version: "${{ matrix.os }}"

            - name: Build
              run: just prepare poodio::build '${{ matrix.rust-target }}'

            - name: Test
              run: |
                  just tool-cargo poodio::test-e2e-bin

                  for v in ${{ matrix.node-versions }}; do
                      volta install "node@${v}"
                      just tool-npm poodio::test-e2e-npm
                  done

                  for v in ${{ matrix.python-versions }}; do
                      UV_PYTHON="${v}" \
                      just tool-pip poodio::test-e2e-pip
                  done

            - uses: actions/upload-artifact@v4
              with:
                  name: "${{ matrix.rust-target }}"
                  path: poodio/dist/

    publish-poodio:
        if: startsWith(github.ref, 'refs/tags/poodio@')
        needs:
            - build-poodio
            - check
        runs-on: macos-latest
        defaults:
            run:
                shell: bash
        permissions:
            attestations: write
            contents: write
            id-token: write
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  fetch-tags: true

            - uses: actions/download-artifact@v4
              with:
                  path: dist-orig/
            - name: Organize distributions
              run: |
                  DIST_ORIG_0="$(set -- dist-orig/*; echo "${1}")"
                  DIST="dist/common/universal"

                  mkdir -p "${DIST}/"
                  mv "${DIST_ORIG_0}/npm/common/" "${DIST}/npm/"
                  mv "${DIST_ORIG_0}/pip/sdist/" "${DIST}/pip/"

                  mkdir -p dist/native/
                  for DIST_ORIG in dist-orig/*; do
                      TARGET="$(basename "${DIST_ORIG}")"
                      DIST="dist/native/$TARGET"

                      mkdir -p "${DIST}/"
                      mv "${DIST_ORIG}/bin/" "${DIST}/bin/"
                      mv "${DIST_ORIG}/npm/native/" "${DIST}/npm/"
                      mv "${DIST_ORIG}/pip/wheel/" "${DIST}/pip/"
                  done

                  rm -r dist-orig/
                  ls -Rlp --color=always dist

            - uses: astral-sh/setup-uv@v6
            - name: Publish to pypi.org
              run: uv publish dist/*/*/pip/*

            - uses: actions/setup-node@v4
              with:
                  cache: npm
                  node-version-file: .node-version
            - name: Publish to npmjs.com
              run: |
                  npm set //registry.npmjs.org/:_authToken "${NODE_AUTH_TOKEN}"
                  for p in dist/*/*/npm/; do
                      npm publish "./${p}"
                  done
                  npm set //registry.npmjs.org/:_authToken
              env:
                  NODE_AUTH_TOKEN: "${{ secrets.POODIO_NPMJS_TOKEN }}"

            - name: Publish to crates.io
              run: cargo publish --locked --package poodio --no-verify --verbose
              env:
                  CARGO_REGISTRY_TOKEN: "${{ secrets.POODIO_CRATE_TOKEN }}"

            - name: Publish to github.com (Preparing)
              id: github-prepare
              run: |
                  LAST_TAG="$(git describe --tags --abbrev=0 HEAD~)"
                  HEAD_TAG="${{ github.ref_name }}"
                  GITHUB_REPO_URL="${{ github.server_url }}/${{ github.repository }}"
                  CHANGELOG="${GITHUB_REPO_URL}/compare/${LAST_TAG}...${HEAD_TAG}"
                  CONTRIBUTORS="$(git log --pretty=format:'  + @%an' "${LAST_TAG}".."${HEAD_TAG}" | sort -u)"
                  INSTALLATION="$GITHUB_REPO_URL/blob/${HEAD_TAG}/poodio/README.md#install"

                  echo "changelog=${CHANGELOG}" >> "${GITHUB_OUTPUT}"
                  echo "contributors=${CONTRIBUTORS}" >> "${GITHUB_OUTPUT}"
                  echo "installation=${INSTALLATION}" >> "${GITHUB_OUTPUT}"
            - name: Publish to github.com (Attestation)
              id: github-attest
              uses: actions/attest-build-provenance@v2
              with:
                  subject-path: dist/*/*/bin/*.tgz
            - name: Publish to github.com
              uses: softprops/action-gh-release@v2
              with:
                  body: |
                      - [**Changelog**](${{ steps.github-prepare.outputs.changelog }})
                      - [**Attestation**](${{ steps.github-attest.outputs.attestation-url }})
                      - [**Installation**](${{ steps.github-prepare.outputs.installation }})
                      - **Contributors**
                      ${{ steps.github-prepare.outputs.contributors }}
                  files: dist/*/*/bin/*.tgz
