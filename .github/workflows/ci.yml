name: CI

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

on:
    push:
        branches: ["main"]
        tags: ["[a-z0-9]+@[0-9]+.[0-9]+.[0-9]+-?*"]
    pull_request:
        branches: ["main"]

env:
    CARGO_TERM_COLOR: always

jobs:
    check:
        runs-on: macos-latest
        steps:
            - uses: actions/checkout@v4
            - uses: taiki-e/install-action@v2
              with:
                  tool: cargo-audit, cargo-outdated, just
            - run: just prepare check
            - run: just audit
              if: github.ref_type == 'tag'

    build-poodio:
        if: startsWith(github.ref, 'refs/tags/poodio@')
        needs: check
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                include:
                    - os: macos-latest
                      target: common
                      test:
                    - os: macos-latest
                      target: aarch64-apple-darwin
                      test: e2e
                    # - os: macos-latest
                    #   target: x86_64-apple-darwin
                    #   test:
                    # - os: ubuntu-latest
                    #   target: x86_64-unknown-linux-gnu
                    #   test: e2e
                    # - os: ubuntu-latest
                    #   target: aarch64-unknown-linux-gnu
                    #   test:
                    # - os: ubuntu-latest
                    #   target: i686-unknown-linux-gnu
                    #   test:
                    # - os: windows-latest
                    #   target: aarch64-pc-windows-msvc
                    #   test:
                    # - os: windows-latest
                    #   target: x86_64-pc-windows-msvc
                    #   test: e2e
                    # - os: windows-latest
                    #   target: i686-pc-windows-msvc
                    #   test:
        steps:
            - uses: actions/checkout@v4
            - uses: taiki-e/setup-cross-toolchain-action@v1
              if: matrix.target != 'common'
              with:
                  target: ${{ matrix.target }}
            - name: Configure Cross-compilation for Ubuntu Linux
              if: matrix.os == 'ubuntu-latest'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y --no-install-recommends \
                    libasound2-dev

                  TARGET=""
                  case "${{ matrix.target }}" in
                    aarch64-*) TARGET="aarch64-linux-gnu" ;;
                    i686-*)    TARGET="i686-linux-gnu"    ;;
                  esac

                  if [[ -n "$TARGET" ]]; then
                    echo "PKG_CONFIG_PATH=/usr/lib/$TARGET/pkgconfig" >> $GITHUB_ENV
                    echo "PKG_CONFIG_SYSROOT_DIR=/" >> $GITHUB_ENV
                  fi
            - uses: taiki-e/install-action@v2
              with:
                  tool: just
            - run: just prepare poodio::build "${{ matrix.target }}"
            - run: just poodio::test-e2e
              if: contains(matrix.test, 'e2e')
            - uses: actions/upload-artifact@v4
              with:
                  name: ${{ matrix.target }}
                  path: poodio/dist/

    publish-poodio:
        needs: build-poodio
        runs-on: macos-latest
        permissions:
            attestations: write
            contents: write
            id-token: write
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  fetch-tags: true
            - uses: actions/download-artifact@v4
              with:
                  path: dist/
            - name: Publish to github.com (Packaging)
              run: |
                  for dir in dist/*; do
                    TARGET="$(basename "$dir")"
                    [[ "$TARGET" == "common" ]] && continue
                    ASSET="poodio-$TARGET.tgz"
                    cd "$dir/bin/"
                    echo "Packaging $ASSET ..."
                    tar -vczf "$ASSET" poodio*
                    cd - > /dev/null
                  done
            - name: Publish to github.com (Generating Release Notes)
              id: github-release-notes
              run: |
                  LAST_TAG="$(git describe --tags --abbrev=0 HEAD~)"
                  HEAD_TAG="${{ github.ref_name }}"
                  CHANGELOG="${{ github.server_url }}/${{ github.repository }}/compare/$LAST_TAG...$HEAD_TAG"
                  CONTRIBUTORS="$(git log --pretty=format:'  + @%an' "$LAST_TAG".."$HEAD_TAG" | sort -u)"

                  echo "::set-output name=changelog::$CHANGELOG"
                  echo "::set-output name=contributors::$CONTRIBUTORS"
            # - name: Publish to github.com (Attestation)
            #   uses: actions/attest-build-provenance@v2
            #   id: attest
            #   with:
            #       subject-name: ${{ github.ref_name }} on github.com
            #       subject-path: dist/*/bin/*.tgz
            - name: Publish to github.com
              uses: softprops/action-gh-release@v2
              with:
                  body: |
                      - [**Changelog**](${{ steps.github-release-notes.outputs.changelog }})
                      - [**Attestation**]({{ steps.attest.outputs.attestation-url }})
                      - [**Installation**](https://github.com/AsherJingkongChen/poopoo/tree/main/poodio#install)
                      - **Contributors**
                      ${{ steps.github-release-notes.outputs.contributors }}
                  files: dist/*/bin/*.tgz

            - name: Publish to npmjs.com
              run: |
                  npm set -L project //registry.npmjs.org/:_authToken "$NODE_AUTH_TOKEN"
                  for pkg in dist/*; do
                    npm publish --dry-run --access public --provenance "./$pkg/npm/"
                  done
                  npm set -L project //registry.npmjs.org/:_authToken
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.POODIO_NPMJS_TOKEN }}

            - name: Publish to crates.io
              run: cargo publish --dry-run --locked --package poodio --no-verify
              env:
                  CARGO_REGISTRY_TOKEN: ${{ secrets.POODIO_CRATE_TOKEN }}
