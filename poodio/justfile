set shell := ['/usr/bin/env', 'bash', '-cu']
set windows-shell := ['C:/Program Files/Git/bin/bash.exe', '-cu']
export UV_NO_SYNC := 'true'

# Build all distributions for the given target triple.
build TARGET:
    @set -e && for s in bin npm pip; do \
        just "build-$s" '{{ TARGET }}'; \
    done

# Build native binary for the given target.
build-bin TARGET:
    rm -rf '{{ BIN_DIST }}/'

    cargo build --bin '{{ NAME }}' --frozen \
        --features default --release \
        --target '{{ TARGET }}'
    @mkdir -p '{{ BIN_DIST }}/'
    tar -C '../target/{{ TARGET }}/release/' \
        -vvczf "{{ BIN_DIST }}/{{ VERS }}-{{ TARGET }}.tgz" '{{ BIN_NAME }}'

    @echo '[DIST] {{ NAME }}/{{ BIN_DIST }}/'

# Build documentation.
build-doc:
    cargo +nightly doc --lib --locked --no-deps

# Build npm package for the given target.
build-npm TARGET:
    rm -rf '{{ NPM_DIST }}/'

    cargo run --bin bindgen --frozen \
        --features bind-napi --release \
        --target '{{ TARGET }}'
    npx napi build --cargo-flags='--frozen --lib' \
        --features bind-napi --release \
        --target '{{ TARGET }}' '{{ NPM_DIST }}/native/'
    cp '{{ NPM_DIST }}/native/index.d.ts' '{{ NPM_DIST }}/common/'

    @echo '[DIST] {{ NAME }}/{{ NPM_DIST }}/'

# Build pip package for the given target.
build-pip TARGET:
    rm -rf '{{ PIP_DIST }}/'

    cargo run --bin bindgen --frozen \
        --features bind-pyo3 --release \
        --target '{{ TARGET }}'
    uv run ruff format 'bind/pip/'

    uv run maturin sdist --out '{{ PIP_DIST }}/sdist/'
    uv run maturin build {{ ZIG_ARGS }} --frozen --release \
        --target '{{ TARGET }}' --out '{{ PIP_DIST }}/wheel/'

    @echo '[DIST] {{ NAME }}/{{ PIP_DIST }}/'

# Run end-to-end tests for all distributions.
test-e2e:
    @set -e && for s in bin npm pip; do \
        just "test-e2e-$s"; \
    done
    @echo '[PASS] test-e2e'

# Run end-to-end tests for built native binary.
test-e2e-bin:
    tar -xzf '{{ BIN_DIST }}/'*.tgz -C '{{ BIN_DIST }}/'

    @[[ -x '{{ BIN_FILE }}' && ! -d '{{ BIN_FILE }}' ]] || \
        (echo '[FAIL] permission' && exit 2)
    @[[ "{{ VERS }}" == "$('{{ BIN_FILE }}' --version)" ]] || \
        (echo '[FAIL] --version' && exit 2)

    @rm '{{ BIN_FILE }}'
    @echo '[PASS] test-e2e-bin'

# Run end-to-end tests for built npm package.
test-e2e-npm:
    npm install --no-save --silent '{{ NPM_DIST }}/'*

    @[[ "{{ VERS }}" == $(node --print 'require("{{ NAME }}").version()') ]] || \
        (echo '[FAIL] .version()' && exit 2)
    @[[ "{{ VERS }}" == "$(npx --no {{ NAME }} -- --version)" ]] || \
        (echo '[FAIL] --version' && exit 2)

    @cd '../' && npm prune
    @echo '[PASS] test-e2e-npm'

# Run end-to-end tests for built pip package.
test-e2e-pip:
    uv pip install --quiet '{{ PIP_DIST }}/wheel/'*

    @[[ "{{ VERS }}" == "$(uv run python -c 'import {{ NAME }} as p;print(p.version())')" ]] || \
        (echo '[FAIL] .version()' && exit 2)
    @[[ "{{ VERS }}" == "$(uv run {{ NAME }} --version)" ]] || \
        (echo '[FAIL] --version' && exit 2)

    @uv pip uninstall '{{ NAME }}'
    @echo '[PASS] test-e2e-pip'

NAME := 'poodio'
BIN_NAME := NAME + if os() == 'windows' { '.exe' } else { '' }
BIN_FILE := join(BIN_DIST, BIN_NAME)
BIN_DIST := 'dist/bin'
NPM_DIST := 'dist/npm'
PIP_DIST := 'dist/pip'
VERS := '$(cargo pkgid -p ' + NAME + " | sed -E 's|.+/(.+)#|\\1@|')"
ZIG_ARGS := if os() == 'linux' { '--zig' } else { '' }
