build TARGET:
    @just \
        build-default '{{ TARGET }}' \
        build-bind-napi '{{ TARGET }}' \
        build-bind-pyo3 '{{ TARGET }}'

build-default TARGET:
    cargo build --locked --release --target '{{ TARGET }}'
    @mkdir -p 'dist/bin/'
    cp '../target/{{ TARGET }}/release/{{ BIN_NAME }}' 'dist/bin/'

build-bind-napi TARGET:
    @printf '{}' > 'package.json'
    npx napi build --cargo-flags=--locked --no-dts-header --release \
        --features bind-napi --target '{{ TARGET }}' 'dist/npm/bind/'
    @rm -f 'package.json'

    cp 'dist/npm/bind/index.d.ts' 'dist/npm/wrap/'
    @printf '{{ NPM_DIST_PURE_MAIN_DATA }}' > 'dist/npm/wrap/index.js'
    chmod +x 'dist/npm/wrap/index.js'

build-bind-pyo3 TARGET:
    uv run --no-sync maturin build --bindings pyo3 --locked --release \
        --features bind-pyo3 --target '{{ TARGET }}' --out 'dist/pip/'

test-e2e:
    @just \
        test-e2e-bin \
        test-e2e-npm \
        test-e2e-pip \
    && echo '[PASS] test-e2e'

test-e2e-bin:
    @[[ -x '{{ DIST_BIN }}' && ! -d '{{ DIST_BIN }}' ]] || \
        (echo '[FAIL] permission' && exit 2)
    @[[ "$('./{{ DIST_BIN }}' --version)" == "{{ VERS }}" ]] || \
        (echo '[FAIL] --version' && exit 2)
    @echo '[PASS] test-e2e-bin'

test-e2e-npm:
    @npm install --no-save --silent {{ DIST_NPM }}
    @[[ "$(npm exec --no poodio -- --version)" == "{{ VERS }}" ]] || \
        (echo '[FAIL] --version' && exit 2)
    @[[ "$(node -p 'require("poodio").version()')" == "{{ VERS }}" ]] || \
        (echo '[FAIL] .version()' && exit 2)
    @npm --silent prune
    @echo '[PASS] test-e2e-npm'

test-e2e-pip:
    @uv pip install --reinstall --quiet {{ DIST_PIP }}
    @[[ "$(uv run --no-sync python -c 'import poodio as p;print(p.version())')" == "{{ VERS }}" ]] || \
        (echo '[FAIL] .version()' && exit 2)
    @# uv run --no-sync poodio --version
    @uv pip uninstall --quiet poodio
    @echo '[PASS] test-e2e-pip'

BIN_NAME := 'poodio' + if os() == 'windows' { '.exe' } else { '' }
DIST_BIN := 'dist/bin/' + BIN_NAME
DIST_NPM := 'dist/npm/*'
DIST_PIP := 'dist/pip/*.whl'
NPM_DIST_PURE_MAIN_DATA := '''
#! /usr/bin/env node
require("tell-libc");
const { name } = require("./package.json");
const { argv, arch, platform, libc } = require("process");
module.exports = require(`@${name}/${name}-${arch}-${platform}-${libc || "unknown"}`);
require.main === module && module.exports.main(argv.slice(1));
'''
VERS := '$(cargo pkgid -p poodio | sed -E "s|.+/(.+)#|\1@|")'
